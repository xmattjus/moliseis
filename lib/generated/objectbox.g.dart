// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../domain/models/attraction/attraction.dart';
import '../domain/models/molis_image/molis_image.dart';
import '../domain/models/paragraph/paragraph.dart';
import '../domain/models/place/place.dart';
import '../domain/models/search/search_query.dart';
import '../domain/models/settings/app_settings.dart';
import '../domain/models/story/story.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 8837963805619282066),
    name: 'Attraction',
    lastPropertyId: const obx_int.IdUid(16, 6506840431121336663),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 444747238827319874),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 9040361598800214624),
        name: 'name',
        type: 9,
        flags: 2048,
        indexId: const obx_int.IdUid(1, 418117556506608197),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4568238184083294901),
        name: 'summary',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 5447231897165534037),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 8900266756994272143),
        name: 'history',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 1369049685631910667),
        name: 'coordinates',
        type: 28,
        flags: 8,
        indexId: const obx_int.IdUid(2, 1348937517637351362),
        hnswParams: obx_int.ModelHnswParams(dimensions: 2, distanceType: 6),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 1688464560582206958),
        name: 'isSaved',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 2142378854931990982),
        name: 'placeId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(24, 1571145934810396761),
        relationTarget: 'Place',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 9124176494150660047),
        name: 'dbType',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 6791827927634188372),
        name: 'createdAt',
        type: 12,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 2076020839404530869),
        name: 'modifiedAt',
        type: 12,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 55944136606289511),
        name: 'backlinkId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 6506840431121336663),
        name: 'sources',
        type: 30,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'images',
        srcEntity: 'MolisImage',
        srcField: '',
      ),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 3250508118221100596),
    name: 'MolisImage',
    lastPropertyId: const obx_int.IdUid(14, 6641824797031894714),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5463675087984256461),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7164082694407020974),
        name: 'title',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1754854828286629541),
        name: 'author',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 1036188977459636270),
        name: 'url',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 6748211061640008587),
        name: 'width',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 3493057153452832668),
        name: 'height',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 916783783922039818),
        name: 'attractionId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(18, 1354817289110165358),
        relationTarget: 'Attraction',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 1667573054698677248),
        name: 'license',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 7103419843139656782),
        name: 'licenseUrl',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 6430494683255962497),
        name: 'createdAt',
        type: 12,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 8045803990764137050),
        name: 'modifiedAt',
        type: 12,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 6641824797031894714),
        name: 'backlinkId',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 1449425446815467518),
    name: 'Place',
    lastPropertyId: const obx_int.IdUid(5, 6333836202892298262),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2555038254189154635),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2121397001960172690),
        name: 'name',
        type: 9,
        flags: 2048,
        indexId: const obx_int.IdUid(5, 4855087247509894144),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5029770910220011192),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 9084281246003650078),
        name: 'createdAt',
        type: 12,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 6333836202892298262),
        name: 'modifiedAt',
        type: 12,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'attractions',
        srcEntity: 'Attraction',
        srcField: '',
      ),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 1940622299969439920),
    name: 'SearchQuery',
    lastPropertyId: const obx_int.IdUid(2, 1498778790275167230),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5017260241869151434),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1498778790275167230),
        name: 'name',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(6, 8898619296747710534),
    name: 'AppSettings',
    lastPropertyId: const obx_int.IdUid(8, 6813134625829058715),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1626854047516772890),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 3812223879155406406),
        name: 'dbMode',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 8822094289421661410),
        name: 'dbBrightness',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 8698919519109082338),
        name: 'modifiedAt',
        type: 12,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 7600004363329355930),
        name: 'crashReporting',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 6813134625829058715),
        name: 'dbAttractionSort',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(7, 1340168161641953630),
    name: 'Paragraph',
    lastPropertyId: const obx_int.IdUid(8, 3617729914889523753),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2546961216339037071),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3780267374608268037),
        name: 'heading',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1160235340129435998),
        name: 'subheading',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 8585529077284427262),
        name: 'body',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 8246309473896161863),
        name: 'backlinkId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 6228624205293209282),
        name: 'createdAt',
        type: 12,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 8432125765972302399),
        name: 'modifiedAt',
        type: 12,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 3617729914889523753),
        name: 'storyId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(25, 4116138194401726752),
        relationTarget: 'Story',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(8, 7818753571793843897),
    name: 'Story',
    lastPropertyId: const obx_int.IdUid(9, 2047211584601032020),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 902192889493066727),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4145711220663851057),
        name: 'title',
        type: 9,
        flags: 2048,
        indexId: const obx_int.IdUid(26, 215074241467870587),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1449791308645804240),
        name: 'author',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4930546338783227413),
        name: 'shortDescription',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7579476447426562064),
        name: 'sources',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 1659971660353826005),
        name: 'backlinkId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 343934000968095751),
        name: 'createdAt',
        type: 12,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 7772290036642924960),
        name: 'modifiedAt',
        type: 12,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 2047211584601032020),
        name: 'attractionId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(27, 9051577855314836158),
        relationTarget: 'Attraction',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(8, 7818753571793843897),
    lastIndexId: const obx_int.IdUid(27, 9051577855314836158),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [6303259256099014926],
    retiredIndexUids: const [
      3416954265858690250,
      8676981558371599650,
      5720877896357794509,
      3388540352171053987,
      5582194185432701654,
      3297596452837463618,
      729178984384523778,
      7501702434375841873,
      42831612386261276,
      593200946467568193,
      5933121235742312675,
      5082892950700277253,
      7237798396665710848,
      5304460236466509918,
      6941920957225262440,
      523946297648778097,
      2867684687757037575,
      7939942860231123791,
      468353302259686115,
    ],
    retiredPropertyUids: const [
      6634118356511184544,
      4141725171849683041,
      179217399890062689,
      3383579438174855452,
      2259924834173801254,
      1752010389330717818,
      257147889351528494,
      1760309149225295297,
      8312955647578623010,
      7004638958949774184,
    ],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Attraction: obx_int.EntityDefinition<Attraction>(
      model: _entities[0],
      toOneRelations: (Attraction object) => [object.place],
      toManyRelations:
          (Attraction object) => {
            obx_int.RelInfo<MolisImage>.toOneBacklink(
                  8,
                  object.id,
                  (MolisImage srcObject) => srcObject.attraction,
                ):
                object.images,
          },
      getId: (Attraction object) => object.id,
      setId: (Attraction object, int id) {
        if (object.id != id) {
          throw ArgumentError(
            'Field Attraction.id is read-only '
            '(final or getter-only) and it was declared to be self-assigned. '
            'However, the currently inserted object (.id=${object.id}) '
            "doesn't match the inserted ID (ID $id). "
            'You must assign an ID before calling [box.put()].',
          );
        }
      },
      objectToFB: (Attraction object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final summaryOffset = fbb.writeString(object.summary);
        final descriptionOffset = fbb.writeString(object.description);
        final historyOffset = fbb.writeString(object.history);
        final coordinatesOffset = fbb.writeListFloat32(object.coordinates);
        final sourcesOffset = fbb.writeList(
          object.sources.map(fbb.writeString).toList(growable: false),
        );
        fbb.startTable(17);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, summaryOffset);
        fbb.addOffset(3, descriptionOffset);
        fbb.addOffset(4, historyOffset);
        fbb.addOffset(8, coordinatesOffset);
        fbb.addBool(9, object.isSaved);
        fbb.addInt64(10, object.place.targetId);
        fbb.addInt64(11, object.dbType);
        fbb.addInt64(12, object.createdAt.microsecondsSinceEpoch * 1000);
        fbb.addInt64(13, object.modifiedAt.microsecondsSinceEpoch * 1000);
        fbb.addInt64(14, object.backlinkId);
        fbb.addOffset(15, sourcesOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final summaryParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final descriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final historyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final imagesParam = obx.ToMany<MolisImage>();
        final coordinatesParam = const fb.ListReader<double>(
          fb.Float32Reader(),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 20, []);
        final sourcesParam = const fb.ListReader<String>(
          fb.StringReader(asciiOptimization: true),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 34, []);
        final backlinkIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          32,
          0,
        );
        final createdAtParam = DateTime.fromMicrosecondsSinceEpoch(
          (const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0) / 1000)
              .round(),
        );
        final modifiedAtParam = DateTime.fromMicrosecondsSinceEpoch(
          (const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0) / 1000)
              .round(),
        );
        final isSavedParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          22,
          false,
        );
        final placeParam = obx.ToOne<Place>(
          targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0),
        );
        final object = Attraction(
            id: idParam,
            name: nameParam,
            summary: summaryParam,
            description: descriptionParam,
            history: historyParam,
            images: imagesParam,
            coordinates: coordinatesParam,
            sources: sourcesParam,
            backlinkId: backlinkIdParam,
            createdAt: createdAtParam,
            modifiedAt: modifiedAtParam,
            isSaved: isSavedParam,
            place: placeParam,
          )
          ..dbType = const fb.Int64Reader().vTableGetNullable(
            buffer,
            rootOffset,
            26,
          );
        object.place.attach(store);
        obx_int.InternalToManyAccess.setRelInfo<Attraction>(
          object.images,
          store,
          obx_int.RelInfo<MolisImage>.toOneBacklink(
            8,
            object.id,
            (MolisImage srcObject) => srcObject.attraction,
          ),
        );
        return object;
      },
    ),
    MolisImage: obx_int.EntityDefinition<MolisImage>(
      model: _entities[1],
      toOneRelations: (MolisImage object) => [object.attraction],
      toManyRelations: (MolisImage object) => {},
      getId: (MolisImage object) => object.id,
      setId: (MolisImage object, int id) {
        if (object.id != id) {
          throw ArgumentError(
            'Field MolisImage.id is read-only '
            '(final or getter-only) and it was declared to be self-assigned. '
            'However, the currently inserted object (.id=${object.id}) '
            "doesn't match the inserted ID (ID $id). "
            'You must assign an ID before calling [box.put()].',
          );
        }
      },
      objectToFB: (MolisImage object, fb.Builder fbb) {
        final titleOffset = fbb.writeString(object.title);
        final authorOffset = fbb.writeString(object.author);
        final urlOffset = fbb.writeString(object.url);
        final licenseOffset = fbb.writeString(object.license);
        final licenseUrlOffset = fbb.writeString(object.licenseUrl);
        fbb.startTable(15);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, titleOffset);
        fbb.addOffset(2, authorOffset);
        fbb.addOffset(4, urlOffset);
        fbb.addInt64(5, object.width);
        fbb.addInt64(6, object.height);
        fbb.addInt64(7, object.attraction.targetId);
        fbb.addOffset(8, licenseOffset);
        fbb.addOffset(9, licenseUrlOffset);
        fbb.addInt64(10, object.createdAt.microsecondsSinceEpoch * 1000);
        fbb.addInt64(11, object.modifiedAt.microsecondsSinceEpoch * 1000);
        fbb.addInt64(13, object.backlinkId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final titleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final authorParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final licenseParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 20, '');
        final licenseUrlParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 22, '');
        final urlParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final widthParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        final heightParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          16,
          0,
        );
        final createdAtParam = DateTime.fromMicrosecondsSinceEpoch(
          (const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0) / 1000)
              .round(),
        );
        final modifiedAtParam = DateTime.fromMicrosecondsSinceEpoch(
          (const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0) / 1000)
              .round(),
        );
        final backlinkIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          30,
          0,
        );
        final attractionParam = obx.ToOne<Attraction>(
          targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
        );
        final object = MolisImage(
          id: idParam,
          title: titleParam,
          author: authorParam,
          license: licenseParam,
          licenseUrl: licenseUrlParam,
          url: urlParam,
          width: widthParam,
          height: heightParam,
          createdAt: createdAtParam,
          modifiedAt: modifiedAtParam,
          backlinkId: backlinkIdParam,
          attraction: attractionParam,
        );
        object.attraction.attach(store);
        return object;
      },
    ),
    Place: obx_int.EntityDefinition<Place>(
      model: _entities[2],
      toOneRelations: (Place object) => [],
      toManyRelations:
          (Place object) => {
            obx_int.RelInfo<Attraction>.toOneBacklink(
                  11,
                  object.id,
                  (Attraction srcObject) => srcObject.place,
                ):
                object.attractions,
          },
      getId: (Place object) => object.id,
      setId: (Place object, int id) {
        if (object.id != id) {
          throw ArgumentError(
            'Field Place.id is read-only '
            '(final or getter-only) and it was declared to be self-assigned. '
            'However, the currently inserted object (.id=${object.id}) '
            "doesn't match the inserted ID (ID $id). "
            'You must assign an ID before calling [box.put()].',
          );
        }
      },
      objectToFB: (Place object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final descriptionOffset = fbb.writeString(object.description);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, descriptionOffset);
        fbb.addInt64(3, object.createdAt.microsecondsSinceEpoch * 1000);
        fbb.addInt64(4, object.modifiedAt.microsecondsSinceEpoch * 1000);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final descriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final createdAtParam = DateTime.fromMicrosecondsSinceEpoch(
          (const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0) / 1000)
              .round(),
        );
        final modifiedAtParam = DateTime.fromMicrosecondsSinceEpoch(
          (const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0) / 1000)
              .round(),
        );
        final attractionsParam = obx.ToMany<Attraction>();
        final object = Place(
          id: idParam,
          name: nameParam,
          description: descriptionParam,
          createdAt: createdAtParam,
          modifiedAt: modifiedAtParam,
          attractions: attractionsParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<Place>(
          object.attractions,
          store,
          obx_int.RelInfo<Attraction>.toOneBacklink(
            11,
            object.id,
            (Attraction srcObject) => srcObject.place,
          ),
        );
        return object;
      },
    ),
    SearchQuery: obx_int.EntityDefinition<SearchQuery>(
      model: _entities[3],
      toOneRelations: (SearchQuery object) => [],
      toManyRelations: (SearchQuery object) => {},
      getId: (SearchQuery object) => object.id,
      setId: (SearchQuery object, int id) {
        object.id = id;
      },
      objectToFB: (SearchQuery object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        fbb.startTable(3);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final object = SearchQuery(nameParam)
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

        return object;
      },
    ),
    AppSettings: obx_int.EntityDefinition<AppSettings>(
      model: _entities[4],
      toOneRelations: (AppSettings object) => [],
      toManyRelations: (AppSettings object) => {},
      getId: (AppSettings object) => object.id,
      setId: (AppSettings object, int id) {
        object.id = id;
      },
      objectToFB: (AppSettings object, fb.Builder fbb) {
        fbb.startTable(9);
        fbb.addInt64(0, object.id);
        fbb.addInt64(3, object.dbMode);
        fbb.addInt64(4, object.dbBrightness);
        fbb.addInt64(5, object.modifiedAt.microsecondsSinceEpoch * 1000);
        fbb.addBool(6, object.crashReporting);
        fbb.addInt64(7, object.dbAttractionSort);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final modifiedAtParam = DateTime.fromMicrosecondsSinceEpoch(
          (const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0) / 1000)
              .round(),
        );
        final crashReportingParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          16,
          false,
        );
        final object =
            AppSettings(
                modifiedAt: modifiedAtParam,
                crashReporting: crashReportingParam,
              )
              ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
              ..dbMode = const fb.Int64Reader().vTableGetNullable(
                buffer,
                rootOffset,
                10,
              )
              ..dbBrightness = const fb.Int64Reader().vTableGetNullable(
                buffer,
                rootOffset,
                12,
              )
              ..dbAttractionSort = const fb.Int64Reader().vTableGetNullable(
                buffer,
                rootOffset,
                18,
              );

        return object;
      },
    ),
    Paragraph: obx_int.EntityDefinition<Paragraph>(
      model: _entities[5],
      toOneRelations: (Paragraph object) => [object.story],
      toManyRelations: (Paragraph object) => {},
      getId: (Paragraph object) => object.id,
      setId: (Paragraph object, int id) {
        if (object.id != id) {
          throw ArgumentError(
            'Field Paragraph.id is read-only '
            '(final or getter-only) and it was declared to be self-assigned. '
            'However, the currently inserted object (.id=${object.id}) '
            "doesn't match the inserted ID (ID $id). "
            'You must assign an ID before calling [box.put()].',
          );
        }
      },
      objectToFB: (Paragraph object, fb.Builder fbb) {
        final headingOffset = fbb.writeString(object.heading);
        final subheadingOffset = fbb.writeString(object.subheading);
        final bodyOffset = fbb.writeString(object.body);
        fbb.startTable(9);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, headingOffset);
        fbb.addOffset(2, subheadingOffset);
        fbb.addOffset(3, bodyOffset);
        fbb.addInt64(4, object.backlinkId);
        fbb.addInt64(5, object.createdAt.microsecondsSinceEpoch * 1000);
        fbb.addInt64(6, object.modifiedAt.microsecondsSinceEpoch * 1000);
        fbb.addInt64(7, object.story.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final headingParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final subheadingParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final bodyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final backlinkIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final createdAtParam = DateTime.fromMicrosecondsSinceEpoch(
          (const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0) / 1000)
              .round(),
        );
        final modifiedAtParam = DateTime.fromMicrosecondsSinceEpoch(
          (const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0) / 1000)
              .round(),
        );
        final storyParam = obx.ToOne<Story>(
          targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
        );
        final object = Paragraph(
          id: idParam,
          heading: headingParam,
          subheading: subheadingParam,
          body: bodyParam,
          backlinkId: backlinkIdParam,
          createdAt: createdAtParam,
          modifiedAt: modifiedAtParam,
          story: storyParam,
        );
        object.story.attach(store);
        return object;
      },
    ),
    Story: obx_int.EntityDefinition<Story>(
      model: _entities[6],
      toOneRelations: (Story object) => [object.attraction],
      toManyRelations: (Story object) => {},
      getId: (Story object) => object.id,
      setId: (Story object, int id) {
        if (object.id != id) {
          throw ArgumentError(
            'Field Story.id is read-only '
            '(final or getter-only) and it was declared to be self-assigned. '
            'However, the currently inserted object (.id=${object.id}) '
            "doesn't match the inserted ID (ID $id). "
            'You must assign an ID before calling [box.put()].',
          );
        }
      },
      objectToFB: (Story object, fb.Builder fbb) {
        final titleOffset = fbb.writeString(object.title);
        final authorOffset = fbb.writeString(object.author);
        final shortDescriptionOffset = fbb.writeString(object.shortDescription);
        final sourcesOffset = fbb.writeList(
          object.sources.map(fbb.writeString).toList(growable: false),
        );
        fbb.startTable(10);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, titleOffset);
        fbb.addOffset(2, authorOffset);
        fbb.addOffset(3, shortDescriptionOffset);
        fbb.addOffset(4, sourcesOffset);
        fbb.addInt64(5, object.backlinkId);
        fbb.addInt64(6, object.createdAt.microsecondsSinceEpoch * 1000);
        fbb.addInt64(7, object.modifiedAt.microsecondsSinceEpoch * 1000);
        fbb.addInt64(8, object.attraction.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final titleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final authorParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final shortDescriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final sourcesParam = const fb.ListReader<String>(
          fb.StringReader(asciiOptimization: true),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 12, []);
        final backlinkIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        final createdAtParam = DateTime.fromMicrosecondsSinceEpoch(
          (const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0) / 1000)
              .round(),
        );
        final modifiedAtParam = DateTime.fromMicrosecondsSinceEpoch(
          (const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0) / 1000)
              .round(),
        );
        final attractionParam = obx.ToOne<Attraction>(
          targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0),
        );
        final object = Story(
          id: idParam,
          title: titleParam,
          author: authorParam,
          shortDescription: shortDescriptionParam,
          sources: sourcesParam,
          backlinkId: backlinkIdParam,
          createdAt: createdAtParam,
          modifiedAt: modifiedAtParam,
          attraction: attractionParam,
        );
        object.attraction.attach(store);
        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Attraction] entity fields to define ObjectBox queries.
class Attraction_ {
  /// See [Attraction.id].
  static final id = obx.QueryIntegerProperty<Attraction>(
    _entities[0].properties[0],
  );

  /// See [Attraction.name].
  static final name = obx.QueryStringProperty<Attraction>(
    _entities[0].properties[1],
  );

  /// See [Attraction.summary].
  static final summary = obx.QueryStringProperty<Attraction>(
    _entities[0].properties[2],
  );

  /// See [Attraction.description].
  static final description = obx.QueryStringProperty<Attraction>(
    _entities[0].properties[3],
  );

  /// See [Attraction.history].
  static final history = obx.QueryStringProperty<Attraction>(
    _entities[0].properties[4],
  );

  /// See [Attraction.coordinates].
  static final coordinates = obx.QueryHnswProperty<Attraction>(
    _entities[0].properties[5],
  );

  /// See [Attraction.isSaved].
  static final isSaved = obx.QueryBooleanProperty<Attraction>(
    _entities[0].properties[6],
  );

  /// See [Attraction.place].
  static final place = obx.QueryRelationToOne<Attraction, Place>(
    _entities[0].properties[7],
  );

  /// See [Attraction.dbType].
  static final dbType = obx.QueryIntegerProperty<Attraction>(
    _entities[0].properties[8],
  );

  /// See [Attraction.createdAt].
  static final createdAt = obx.QueryDateNanoProperty<Attraction>(
    _entities[0].properties[9],
  );

  /// See [Attraction.modifiedAt].
  static final modifiedAt = obx.QueryDateNanoProperty<Attraction>(
    _entities[0].properties[10],
  );

  /// See [Attraction.backlinkId].
  static final backlinkId = obx.QueryIntegerProperty<Attraction>(
    _entities[0].properties[11],
  );

  /// See [Attraction.sources].
  static final sources = obx.QueryStringVectorProperty<Attraction>(
    _entities[0].properties[12],
  );

  /// see [Attraction.images]
  static final images = obx.QueryBacklinkToMany<MolisImage, Attraction>(
    MolisImage_.attraction,
  );
}

/// [MolisImage] entity fields to define ObjectBox queries.
class MolisImage_ {
  /// See [MolisImage.id].
  static final id = obx.QueryIntegerProperty<MolisImage>(
    _entities[1].properties[0],
  );

  /// See [MolisImage.title].
  static final title = obx.QueryStringProperty<MolisImage>(
    _entities[1].properties[1],
  );

  /// See [MolisImage.author].
  static final author = obx.QueryStringProperty<MolisImage>(
    _entities[1].properties[2],
  );

  /// See [MolisImage.url].
  static final url = obx.QueryStringProperty<MolisImage>(
    _entities[1].properties[3],
  );

  /// See [MolisImage.width].
  static final width = obx.QueryIntegerProperty<MolisImage>(
    _entities[1].properties[4],
  );

  /// See [MolisImage.height].
  static final height = obx.QueryIntegerProperty<MolisImage>(
    _entities[1].properties[5],
  );

  /// See [MolisImage.attraction].
  static final attraction = obx.QueryRelationToOne<MolisImage, Attraction>(
    _entities[1].properties[6],
  );

  /// See [MolisImage.license].
  static final license = obx.QueryStringProperty<MolisImage>(
    _entities[1].properties[7],
  );

  /// See [MolisImage.licenseUrl].
  static final licenseUrl = obx.QueryStringProperty<MolisImage>(
    _entities[1].properties[8],
  );

  /// See [MolisImage.createdAt].
  static final createdAt = obx.QueryDateNanoProperty<MolisImage>(
    _entities[1].properties[9],
  );

  /// See [MolisImage.modifiedAt].
  static final modifiedAt = obx.QueryDateNanoProperty<MolisImage>(
    _entities[1].properties[10],
  );

  /// See [MolisImage.backlinkId].
  static final backlinkId = obx.QueryIntegerProperty<MolisImage>(
    _entities[1].properties[11],
  );
}

/// [Place] entity fields to define ObjectBox queries.
class Place_ {
  /// See [Place.id].
  static final id = obx.QueryIntegerProperty<Place>(_entities[2].properties[0]);

  /// See [Place.name].
  static final name = obx.QueryStringProperty<Place>(
    _entities[2].properties[1],
  );

  /// See [Place.description].
  static final description = obx.QueryStringProperty<Place>(
    _entities[2].properties[2],
  );

  /// See [Place.createdAt].
  static final createdAt = obx.QueryDateNanoProperty<Place>(
    _entities[2].properties[3],
  );

  /// See [Place.modifiedAt].
  static final modifiedAt = obx.QueryDateNanoProperty<Place>(
    _entities[2].properties[4],
  );

  /// see [Place.attractions]
  static final attractions = obx.QueryBacklinkToMany<Attraction, Place>(
    Attraction_.place,
  );
}

/// [SearchQuery] entity fields to define ObjectBox queries.
class SearchQuery_ {
  /// See [SearchQuery.id].
  static final id = obx.QueryIntegerProperty<SearchQuery>(
    _entities[3].properties[0],
  );

  /// See [SearchQuery.name].
  static final name = obx.QueryStringProperty<SearchQuery>(
    _entities[3].properties[1],
  );
}

/// [AppSettings] entity fields to define ObjectBox queries.
class AppSettings_ {
  /// See [AppSettings.id].
  static final id = obx.QueryIntegerProperty<AppSettings>(
    _entities[4].properties[0],
  );

  /// See [AppSettings.dbMode].
  static final dbMode = obx.QueryIntegerProperty<AppSettings>(
    _entities[4].properties[1],
  );

  /// See [AppSettings.dbBrightness].
  static final dbBrightness = obx.QueryIntegerProperty<AppSettings>(
    _entities[4].properties[2],
  );

  /// See [AppSettings.modifiedAt].
  static final modifiedAt = obx.QueryDateNanoProperty<AppSettings>(
    _entities[4].properties[3],
  );

  /// See [AppSettings.crashReporting].
  static final crashReporting = obx.QueryBooleanProperty<AppSettings>(
    _entities[4].properties[4],
  );

  /// See [AppSettings.dbAttractionSort].
  static final dbAttractionSort = obx.QueryIntegerProperty<AppSettings>(
    _entities[4].properties[5],
  );
}

/// [Paragraph] entity fields to define ObjectBox queries.
class Paragraph_ {
  /// See [Paragraph.id].
  static final id = obx.QueryIntegerProperty<Paragraph>(
    _entities[5].properties[0],
  );

  /// See [Paragraph.heading].
  static final heading = obx.QueryStringProperty<Paragraph>(
    _entities[5].properties[1],
  );

  /// See [Paragraph.subheading].
  static final subheading = obx.QueryStringProperty<Paragraph>(
    _entities[5].properties[2],
  );

  /// See [Paragraph.body].
  static final body = obx.QueryStringProperty<Paragraph>(
    _entities[5].properties[3],
  );

  /// See [Paragraph.backlinkId].
  static final backlinkId = obx.QueryIntegerProperty<Paragraph>(
    _entities[5].properties[4],
  );

  /// See [Paragraph.createdAt].
  static final createdAt = obx.QueryDateNanoProperty<Paragraph>(
    _entities[5].properties[5],
  );

  /// See [Paragraph.modifiedAt].
  static final modifiedAt = obx.QueryDateNanoProperty<Paragraph>(
    _entities[5].properties[6],
  );

  /// See [Paragraph.story].
  static final story = obx.QueryRelationToOne<Paragraph, Story>(
    _entities[5].properties[7],
  );
}

/// [Story] entity fields to define ObjectBox queries.
class Story_ {
  /// See [Story.id].
  static final id = obx.QueryIntegerProperty<Story>(_entities[6].properties[0]);

  /// See [Story.title].
  static final title = obx.QueryStringProperty<Story>(
    _entities[6].properties[1],
  );

  /// See [Story.author].
  static final author = obx.QueryStringProperty<Story>(
    _entities[6].properties[2],
  );

  /// See [Story.shortDescription].
  static final shortDescription = obx.QueryStringProperty<Story>(
    _entities[6].properties[3],
  );

  /// See [Story.sources].
  static final sources = obx.QueryStringVectorProperty<Story>(
    _entities[6].properties[4],
  );

  /// See [Story.backlinkId].
  static final backlinkId = obx.QueryIntegerProperty<Story>(
    _entities[6].properties[5],
  );

  /// See [Story.createdAt].
  static final createdAt = obx.QueryDateNanoProperty<Story>(
    _entities[6].properties[6],
  );

  /// See [Story.modifiedAt].
  static final modifiedAt = obx.QueryDateNanoProperty<Story>(
    _entities[6].properties[7],
  );

  /// See [Story.attraction].
  static final attraction = obx.QueryRelationToOne<Story, Attraction>(
    _entities[6].properties[8],
  );
}
