import 'package:flutter/foundation.dart';
import 'package:json_annotation/json_annotation.dart';
import 'package:moliseis/domain/models/attraction/attraction_type.dart';
import 'package:moliseis/domain/models/molis_image/molis_image.dart';
import 'package:moliseis/domain/models/place/place.dart';
import 'package:objectbox/objectbox.dart';

part 'attraction.g.dart';

@Entity()
@JsonSerializable()
class Attraction {
  @Id(assignable: true)
  final int id;

  @Index()
  final String name;

  final String summary;

  final String description;

  final String history;

  @Backlink()
  @_MolisImageRelToManyConverter()
  final ToMany<MolisImage> images;

  /// Latitude x Longitude
  @HnswIndex(dimensions: 2, distanceType: VectorDistanceType.geo)
  @Property(type: PropertyType.floatVector)
  final List<double> coordinates;

  @JsonKey(name: 'sources')
  final List<String> sources;

  @JsonKey(name: 'place_id')
  final int backlinkId;

  @Property(type: PropertyType.dateNano)
  @JsonKey(name: 'created_at')
  final DateTime createdAt;

  @Property(type: PropertyType.dateNano)
  @JsonKey(name: 'modified_at')
  final DateTime modifiedAt;

  @JsonKey(includeFromJson: false, includeToJson: false)
  bool isSaved;

  @Transient()
  AttractionType type;

  @JsonKey(includeFromJson: false, includeToJson: false)
  int? get dbType {
    _ensureStableEnumValues();
    return type.index;
  }

  set dbType(int? value) {
    _ensureStableEnumValues();
    if (value == null) {
      type = AttractionType.unknown;
    } else {
      type = value >= 0 && value < AttractionType.values.length
          ? AttractionType.values[value]
          : AttractionType.unknown;
    }
  }

  @_PlaceRelToOneConverter()
  final ToOne<Place> place;

  Attraction({
    required this.id,
    required this.name,
    required this.summary,
    required this.description,
    required this.history,
    required this.images,
    required this.coordinates,
    this.type = AttractionType.unknown,
    required this.sources,
    required this.backlinkId,
    required this.createdAt,
    required this.modifiedAt,
    this.isSaved = false,
    required this.place,
  });

  @override
  bool operator ==(Object other) =>
      other is Attraction &&
      other.id == id &&
      other.name == name &&
      other.summary == summary &&
      other.description == description &&
      other.history == history &&
      // listEquals(other.coordinates, coordinates) &&
      other.createdAt.isAtSameMomentAs(createdAt) &&
      other.modifiedAt.isAtSameMomentAs(modifiedAt) &&
      other.type == type &&
      listEquals(other.sources, sources) &&
      other.backlinkId == backlinkId;

  @override
  int get hashCode => Object.hash(
    id,
    name,
    summary,
    description,
    history,
    // Object.hashAll(coordinates),
    createdAt,
    modifiedAt,
    type,
    Object.hashAll(sources),
    backlinkId,
  );

  /// Creates a copy of this object with the given fields updated.
  Attraction copyWith({
    String? name,
    String? summary,
    String? description,
    String? history,
    List<double>? coordinates,
    AttractionType? type,
    List<String>? sources,
    int? backlinkId,
    DateTime? createdAt,
    DateTime? modifiedAt,
    bool? isSaved,
  }) {
    final copy = Attraction(
      id: id,
      name: name ?? this.name,
      summary: summary ?? this.summary,
      description: description ?? this.description,
      history: history ?? this.history,
      images: images,
      coordinates: coordinates ?? this.coordinates,
      type: type ?? this.type,
      sources: sources ?? this.sources,
      backlinkId: backlinkId ?? this.backlinkId,
      createdAt: createdAt ?? this.createdAt,
      modifiedAt: modifiedAt ?? this.modifiedAt,
      isSaved: isSaved ?? this.isSaved,
      place: place,
    );

    /// Prepares the other Box this object relates to, to be updated once this
    /// object has been put in its own Box.
    copy.place.targetId = backlinkId ?? place.targetId;

    return copy;
  }

  /// Creates a new [Attraction] from a Json string.
  ///
  /// The implementation of this method is generated by build_runner and
  /// the json_serializable package.
  factory Attraction.fromJson(Map<String, dynamic> json) =>
      _$AttractionFromJson(json);

  /// Converts an [Attraction] to a Json string.
  ///
  /// The implementation of this method is generated by build_runner and
  /// the json_serializable package.
  Map<String, dynamic> toJson() => _$AttractionToJson(this);

  void _ensureStableEnumValues() {
    assert(AttractionType.unknown.index == 0);
    assert(AttractionType.nature.index == 1);
    assert(AttractionType.history.index == 2);
    assert(AttractionType.folklore.index == 3);
    assert(AttractionType.food.index == 4);
    assert(AttractionType.allure.index == 5);
    assert(AttractionType.experience.index == 6);
  }
}

class _MolisImageRelToManyConverter
    implements JsonConverter<ToMany<MolisImage>, List<Map<String, dynamic>>?> {
  const _MolisImageRelToManyConverter();

  @override
  ToMany<MolisImage> fromJson(List<Map<String, dynamic>>? json) =>
      ToMany<MolisImage>(
        items: json?.map<MolisImage>((e) => MolisImage.fromJson(e)).toList(),
      );

  @override
  List<Map<String, dynamic>>? toJson(ToMany<MolisImage> rel) =>
      rel.map((MolisImage obj) => obj.toJson()).toList();
}

class _PlaceRelToOneConverter
    implements JsonConverter<ToOne<Place>, Map<String, dynamic>?> {
  const _PlaceRelToOneConverter();

  @override
  ToOne<Place> fromJson(Map<String, dynamic>? json) =>
      ToOne<Place>(target: json == null ? null : Place.fromJson(json));

  @override
  Map<String, dynamic>? toJson(ToOne<Place> rel) => rel.target?.toJson();
}
